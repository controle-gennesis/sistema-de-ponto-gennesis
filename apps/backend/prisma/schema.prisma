// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuário
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  name         String
  cpf          String   @unique
  role         UserRole @default(EMPLOYEE)
  isActive     Boolean  @default(true)
  isFirstLogin Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relacionamentos
  employee     Employee?
  timeRecords  TimeRecord[]
  vacations    Vacation[]
  overtime     Overtime[]
  reports      Report[]
  medicalCertificates MedicalCertificate[]
  approvedCertificates MedicalCertificate[] @relation("CertificateApprover")
  salaryAdjustments SalaryAdjustment[]
  salaryDiscounts   SalaryDiscount[]
  pointCorrectionRequests PointCorrectionRequest[] @relation("PointCorrectionApprover")
  pointCorrectionComments PointCorrectionComment[]

  @@map("users")
}

// Modelo de Funcionário
model Employee {
  id                String    @id @default(cuid())
  userId            String    @unique
  employeeId        String    @unique // Matrícula
  department        String
  position          String
  hireDate          DateTime
  birthDate         DateTime? // Data de nascimento para aniversários
  salary            Decimal   @db.Decimal(10, 2)
  workSchedule      Json      // Horário de trabalho em JSON
  isRemote          Boolean   @default(false)
  allowedLocations  Json?     // Locais permitidos para bater ponto
  costCenter        String?   // Centro de custo
  client            String?   // Tomador
  dailyFoodVoucher  Float?    @default(33.40) // Vale Alimentação diário (padrão R$ 33,40)
  dailyTransportVoucher Float? @default(11.00) // Vale Transporte diário (padrão R$ 11,00)
  
  // Novos campos - Dados da Empresa
  company           String?   // EMPRESA
  
  // Novos campos - Dados Bancários
  bank              String?   // BANCO
  accountType       String?   // TIPO DE CONTA
  agency            String?   // AGÊNCIA
  operation         String?   // OP.
  account           String?   // CONTA
  digit             String?   // DIGITO
  
  // Novos campos - Dados PIX
  pixKeyType        String?   // TIPO DE CHAVE
  pixKey            String?   // CHAVE PIX
  
  // Novos campos - Modalidade e Adicionais
  modality          String?   // MODALIDADE (MEI, CLT, ESTAGIARIO)
  familySalary      Decimal?  @db.Decimal(10, 2) // SALÁRIO FAMÍLIA
  dangerPay         Decimal?  @db.Decimal(10, 2) // PERICULOSIDADE
  unhealthyPay      Decimal?  @db.Decimal(10, 2) // INSALUBRIDADE
  
  // Novos campos - Polo e Categoria Financeira
  polo              String?   // POLO (BRASÍLIA, GOIÁS)
  categoriaFinanceira String?  // CATEGORIA FINANCEIRA (GASTO, DESPESA)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relacionamentos
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeRecords TimeRecord[]
  vacations   Vacation[]
  overtime    Overtime[]
  medicalCertificates MedicalCertificate[]
  salaryAdjustments SalaryAdjustment[]
  salaryDiscounts   SalaryDiscount[]
  pointCorrectionRequests PointCorrectionRequest[]
  manualInssValues   ManualInssValue[]

  @@map("employees")
}

// Modelo de Registro de Ponto
model TimeRecord {
  id          String        @id @default(cuid())
  userId      String
  employeeId  String
  type        TimeRecordType
  timestamp   DateTime      @default(now())
  latitude    Float?
  longitude   Float?
  photoUrl    String?
  photoKey    String?       // Chave do S3
  isValid     Boolean       @default(true)
  reason      String?       // Motivo se inválido
  observation String?       // Observação do funcionário
  approvedBy  String?       // ID do aprovador
  approvedAt  DateTime?
  foodVoucherAmount Float?  @default(0) // Valor do VA no dia
  transportVoucherAmount Float? @default(0) // Valor do VT no dia
  costCenter  String?       // Centro de custo do funcionário no momento do ponto
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relacionamentos
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("time_records")
}

// Modelo de Férias
model Vacation {
  id                    String         @id @default(cuid())
  userId               String
  employeeId           String
  
  // Período das férias
  startDate            DateTime
  endDate              DateTime
  days                 Int
  
  // Classificação
  type                 VacationType    @default(ANNUAL)
  status               VacationStatus  @default(PENDING)
  fraction             Int?            // Número do fracionamento (1, 2, 3)
  
  // Período aquisitivo
  aquisitiveStart      DateTime        // Início do período aquisitivo
  aquisitiveEnd        DateTime        // Fim do período aquisitivo
  concessiveEnd        DateTime        // Vencimento das férias
  
  // Documentação
  noticeSentAt         DateTime?       // Data do aviso
  noticeReceivedAt     DateTime?       // Data da confirmação
  paymentDate          DateTime?       // Data do pagamento
  paymentAmount        Decimal?        @db.Decimal(10, 2)
  
  // Aprovação
  reason               String?
  approvedBy           String?
  approvedAt           DateTime?
  
  // Auditoria
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  // Relacionamentos
  user                 User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  employee             Employee        @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("vacations")
}

// Modelo de Horas Extras
model Overtime {
  id          String        @id @default(cuid())
  userId      String
  employeeId  String
  date        DateTime
  hours       Decimal       @db.Decimal(4, 2)
  type        OvertimeType
  description String?
  status      OvertimeStatus @default(PENDING)
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relacionamentos
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("overtime")
}

// Modelo de Relatórios
model Report {
  id          String     @id @default(cuid())
  userId      String
  type        ReportType
  title       String
  description String?
  data        Json       // Dados do relatório em JSON
  period      Json       // Período do relatório
  status      ReportStatus @default(GENERATED)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reports")
}

// Modelo de Configurações da Empresa
model CompanySettings {
  id                    String   @id @default(cuid())
  name                  String
  cnpj                  String   @unique
  address               String
  phone                 String?
  email                 String?
  workStartTime         String   @default("07:00")
  workEndTime           String   @default("17:00")
  lunchStartTime        String   @default("12:00")
  lunchEndTime          String   @default("13:00")
  toleranceMinutes      Int      @default(10)
  maxOvertimeHours      Int      @default(2)
  maxDistanceMeters     Int      @default(1000)
  defaultLatitude       Float    @default(-23.5505)
  defaultLongitude      Float    @default(-46.6333)
  vacationDaysPerYear   Int      @default(30)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("company_settings")
}

// Modelo de Logs de Auditoria
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String?
  oldData   Json?
  newData   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

// Enums
enum UserRole {
  EMPLOYEE
}

enum TimeRecordType {
  ENTRY
  EXIT
  LUNCH_START
  LUNCH_END
  BREAK_START
  BREAK_END
  ABSENCE_JUSTIFIED
}

enum VacationType {
  ANNUAL               // Férias anuais
  FRACTIONED_1         // 1º período fracionado
  FRACTIONED_2         // 2º período fracionado  
  FRACTIONED_3         // 3º período fracionado
  SICK                 // Férias por doença
  MATERNITY            // Licença maternidade
  PATERNITY            // Licença paternidade
  EMERGENCY            // Férias de emergência
  COLLECTIVE           // Férias coletivas
}

enum VacationStatus {
  PENDING              // Aguardando aprovação
  APPROVED             // Aprovado
  NOTICE_SENT          // Aviso enviado
  NOTICE_CONFIRMED     // Aviso confirmado
  IN_PROGRESS          // Em andamento
  COMPLETED            // Concluído
  REJECTED             // Rejeitado
  CANCELLED            // Cancelado
  EXPIRED              // Vencido
}

enum OvertimeType {
  REGULAR
  WEEKEND
  HOLIDAY
  NIGHT
}

enum OvertimeStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum ReportType {
  ATTENDANCE
  OVERTIME
  VACATION
  PRODUCTIVITY
  CUSTOM
}

enum ReportStatus {
  GENERATED
  PROCESSING
  ERROR
}

// Modelo de Atestados Médicos
model MedicalCertificate {
  id              String                    @id @default(cuid())
  userId          String
  employeeId      String
  type            MedicalCertificateType    @default(MEDICAL)
  startDate       DateTime                  // Data de início (pode ser futura)
  endDate         DateTime                  // Data de fim (pode ser futura)
  days            Int                       // Quantidade de dias (calculado automaticamente)
  description     String?                   // Descrição/observações do funcionário
  fileName        String?                   // Nome do arquivo anexado
  fileUrl         String?                   // URL do arquivo no S3
  fileKey         String?                   // Chave do arquivo no S3
  status          MedicalCertificateStatus  @default(PENDING)
  reason          String?                   // Motivo da reprovação (se aplicável)
  approvedBy      String?                   // ID do RH que aprovou/reprovou
  approvedAt      DateTime?                 // Data da aprovação/reprovação
  submittedAt     DateTime                  @default(now()) // Data de envio
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt

  // Relacionamentos
  user            User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  employee        Employee                  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  approver        User?                     @relation("CertificateApprover", fields: [approvedBy], references: [id])

  @@map("medical_certificates")
}

enum MedicalCertificateType {
  MEDICAL        // Atestado médico
  DENTAL         // Atestado odontológico
  PREVENTIVE     // Atestado de exame preventivo
  ACCIDENT       // Atestado de acidente de trabalho
  COVID          // Atestado COVID-19
  MATERNITY      // Atestado de maternidade
  PATERNITY      // Atestado de paternidade
  OTHER          // Outros
}

enum MedicalCertificateStatus {
  PENDING        // Aguardando aprovação
  APPROVED       // Aprovado
  REJECTED       // Rejeitado
  CANCELLED      // Cancelado pelo funcionário
}

// Novos enums para os campos adicionados
enum Company {
  ABRASIL        // ABRASIL
  GENNESIS       // GÊNNESIS
  METRICA        // MÉTRICA
}

enum Bank {
  BANCO_DO_BRASIL    // BANCO DO BRASIL
  BRADESCO          // BRADESCO
  C6                // C6
  CAIXA_ECONOMICA   // CAIXA ECONÔMICA
  CEF               // CEF
  INTER             // INTER
  ITAU              // ITAÚ
  NUBANK            // NUBANK
  PICPAY            // PICPAY
  SANTANDER         // SANTANDER
}

enum AccountType {
  CONTA_SALARIO     // CONTA SALÁRIO
  CONTA_CORRENTE    // CONTA CORRENTE
  POUPANCA          // POUPANÇA
}

enum PixKeyType {
  ALEATORIA         // ALEATÓRIA
  CELULAR           // CELULAR
  CNPJ              // CNPJ
  CPF               // CPF
  EMAIL             // E-MAIL
}

// Modelo de Acréscimos Salariais
model SalaryAdjustment {
  id          String           @id @default(cuid())
  employeeId  String
  type        AdjustmentType
  description String
  amount      Decimal          @db.Decimal(10, 2)
  isFixed     Boolean          @default(false)  // Se true, será aplicado automaticamente todo mês
  createdBy   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relacionamentos
  employee  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  creator   User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("salary_adjustments")
}

enum AdjustmentType {
  BONUS        // Bônus/Prêmio
  OVERTIME     // Horas Extras
  COMMISSION   // Comissão
  OTHER        // Outros
}

// Modelo de Descontos Salariais
model SalaryDiscount {
  id          String        @id @default(cuid())
  employeeId  String
  type        DiscountType
  description String
  amount      Decimal       @db.Decimal(10, 2)
  createdBy   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relacionamentos
  employee  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  creator   User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("salary_discounts")
}

enum DiscountType {
  FINE        // Multa
  CONSIGNED   // Consignado
  OTHER       // Outros
}

// Modelo de Solicitações de Correção de Ponto
model PointCorrectionRequest {
  id               String            @id @default(cuid())
  employeeId       String
  title            String
  description      String
  justification    String
  
  // Dados originais (incorretos)
  originalDate     DateTime
  originalTime     String
  originalType     TimeRecordType
  
  // Dados corrigidos (solicitados)
  correctedDate    DateTime
  correctedTime    String
  correctedType    TimeRecordType
  
  // Status e aprovação
  status           RequestStatus     @default(PENDING)
  approvedBy       String?
  approvedAt       DateTime?
  rejectionReason  String?
  
  // Metadados
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relacionamentos
  employee         Employee          @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  approver         User?             @relation("PointCorrectionApprover", fields: [approvedBy], references: [id])
  comments         PointCorrectionComment[]

  @@map("point_correction_requests")
}

// Modelo de Comentários das Solicitações
model PointCorrectionComment {
  id         String                 @id @default(cuid())
  requestId  String
  userId     String
  comment    String
  isInternal Boolean                @default(false)
  createdAt  DateTime               @default(now())

  // Relacionamentos
  request    PointCorrectionRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user       User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("point_correction_comments")
}

// Modelo de Valores Manuais de INSS (Rescisão e 13°)
model ManualInssValue {
  id         String   @id @default(cuid())
  employeeId String
  month      Int      // Mês (1-12)
  year       Int      // Ano
  inssRescisao Decimal @default(0) // INSS RESCISÃO
  inss13     Decimal  @default(0)  // INSS 13°
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relacionamentos
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  // Índice único para evitar duplicatas
  @@unique([employeeId, month, year])
  @@map("manual_inss_values")
}

enum RequestStatus {
  PENDING     // Pendente
  IN_REVIEW   // Em Análise
  APPROVED    // Aprovada
  REJECTED    // Rejeitada
  CANCELLED   // Cancelada
}
